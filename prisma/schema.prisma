// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  // NOTE: When using postgresql, mysql or sqlserver, uncomment the @db.text annotations in model Account below
  // Further reading: 
  // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
  // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
  url      = env("DATABASE_URL")
}

// Necessary for Next auth
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

// model Card {
//   id        Int      @id @default(autoincrement())
//   chipId    String
//   User      User     @relation(fields: [userId], references: [id])
//   userId    String   @unique
//   balance   Int      @default(0)
//   createdAt DateTime @default(now())
//   updatedAt DateTime @default(now()) @updatedAt
// }

model User {
  id            String         @id @default(cuid())
  name          String         @unique
  email         String         @unique
  password      String
  emailVerified DateTime?
  civId         String         @default("")
  department    String         @default("")
  // card          Card?
  image         String?
  accounts      Account[]
  sessions      Session[]
  reservation   ReservedDine[]
  cart          Cart?
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model ReservedDine {
  id        Int      @id @default(autoincrement())
  userId    String
  user      User     @relation(fields: [userId], references: [id])
  dineId    Int
  Dine      Dine     @relation(fields: [dineId], references: [id])
  used      Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())
}

enum DINEHOURS {
  BREAKFAST
  LUNCH
  DINNER
}

model Cart {
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  dine      Dine[]
  total     Int      @default(0)
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt

  @@id([userId])
}

model Dine {
  id           Int            @id @default(autoincrement())
  foods        Food[]
  reservations ReservedDine[]
  type         DINEHOURS
  cart         Cart[]
  cost         Int            @default(5)
  date         DateTime       @default(now())
}

enum FoodType {
  SOUP
  MAIN
  SIDE
  EXTRA
}

model Food {
  id    Int      @id @default(autoincrement())
  label String   @db.Text
  type  FoodType
  dine  Dine[]
}
